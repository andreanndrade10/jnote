{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_region = pd.read_excel('db.xlsx', 'regiao')\n",
    "df_region['Regiao'] = df_region['Regiao'].map(lambda regiao: regiao.split()[-1])\n",
    "df = pd.read_excel('db.xlsx','classificacao')\n",
    "df = pd.merge(df, df_region[['UF','Regiao']],how='inner' ,on='UF')\n",
    "df_questions = pd.read_excel('db.xlsx', 'questions')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unidade</th>\n",
       "      <th>UF</th>\n",
       "      <th>Tamanho</th>\n",
       "      <th>Maturidade Infra</th>\n",
       "      <th>Maturidade Conexão</th>\n",
       "      <th>Maturidade Controle de Conteúdo</th>\n",
       "      <th>Maturidade final</th>\n",
       "      <th>Classe</th>\n",
       "      <th>Regiao</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SENAI - CIMATEC</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.6</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.6</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SENAI - CAMAÇARI</td>\n",
       "      <td>BA</td>\n",
       "      <td>Média</td>\n",
       "      <td>8.6</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7.6</td>\n",
       "      <td>Classe B</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CFP Candeias</td>\n",
       "      <td>BA</td>\n",
       "      <td>Pequena</td>\n",
       "      <td>8.6</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>7.2</td>\n",
       "      <td>Classe C</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SENAI - LAURO DE FREITAS</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.2</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.4</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SENAI - DENDEZEIROS</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.6</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.6</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Unidade  UF  Tamanho  Maturidade Infra  \\\n",
       "0           SENAI - CIMATEC  BA   Grande               9.6   \n",
       "1          SENAI - CAMAÇARI  BA    Média               8.6   \n",
       "2              CFP Candeias  BA  Pequena               8.6   \n",
       "3  SENAI - LAURO DE FREITAS  BA   Grande               9.2   \n",
       "4       SENAI - DENDEZEIROS  BA   Grande               9.6   \n",
       "\n",
       "   Maturidade Conexão  Maturidade Controle de Conteúdo  Maturidade final  \\\n",
       "0                   9                                7               8.6   \n",
       "1                   7                                7               7.6   \n",
       "2                   6                                7               7.2   \n",
       "3                   9                                7               8.4   \n",
       "4                   9                                7               8.6   \n",
       "\n",
       "     Classe    Regiao  \n",
       "0  Classe A  Nordeste  \n",
       "1  Classe B  Nordeste  \n",
       "2  Classe C  Nordeste  \n",
       "3  Classe A  Nordeste  \n",
       "4  Classe A  Nordeste  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Maturidade Infra                   8.066667\n",
       "Maturidade Conexão                 8.041667\n",
       "Maturidade Controle de Conteúdo    5.875000\n",
       "Maturidade final                   7.354167\n",
       "dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Médias Nacionais\n",
    "df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Maturidade Infra</th>\n",
       "      <th>Maturidade Conexão</th>\n",
       "      <th>Maturidade Controle de Conteúdo</th>\n",
       "      <th>Maturidade final</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regiao</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Centro-Oeste</th>\n",
       "      <td>6.800000</td>\n",
       "      <td>8.333333</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>5.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nordeste</th>\n",
       "      <td>8.247619</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.523810</td>\n",
       "      <td>7.619048</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Maturidade Infra  Maturidade Conexão  \\\n",
       "Regiao                                               \n",
       "Centro-Oeste          6.800000            8.333333   \n",
       "Nordeste              8.247619            8.000000   \n",
       "\n",
       "              Maturidade Controle de Conteúdo  Maturidade final  \n",
       "Regiao                                                           \n",
       "Centro-Oeste                         1.333333          5.500000  \n",
       "Nordeste                             6.523810          7.619048  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Médias Regionais\n",
    "df.groupby('Regiao').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Maturidade Infra</th>\n",
       "      <th>Maturidade Conexão</th>\n",
       "      <th>Maturidade Controle de Conteúdo</th>\n",
       "      <th>Maturidade final</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UF</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>BA</th>\n",
       "      <td>8.247619</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.523810</td>\n",
       "      <td>7.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DF</th>\n",
       "      <td>6.800000</td>\n",
       "      <td>8.333333</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>5.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Maturidade Infra  Maturidade Conexão  Maturidade Controle de Conteúdo  \\\n",
       "UF                                                                          \n",
       "BA          8.247619            8.000000                         6.523810   \n",
       "DF          6.800000            8.333333                         1.333333   \n",
       "\n",
       "    Maturidade final  \n",
       "UF                    \n",
       "BA          7.619048  \n",
       "DF          5.500000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Médias Estaduais\n",
    "df.groupby('UF').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unidade</th>\n",
       "      <th>UF</th>\n",
       "      <th>Tamanho</th>\n",
       "      <th>Maturidade Infra</th>\n",
       "      <th>Maturidade Conexão</th>\n",
       "      <th>Maturidade Controle de Conteúdo</th>\n",
       "      <th>Maturidade final</th>\n",
       "      <th>Classe</th>\n",
       "      <th>Regiao</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SENAI - CIMATEC</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.6</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.6</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SENAI - LAURO DE FREITAS</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.2</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.4</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SENAI - DENDEZEIROS</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.6</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.6</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>SENAI Feira de Santana</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.6</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.6</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Unidade  UF Tamanho  Maturidade Infra  Maturidade Conexão  \\\n",
       "0           SENAI - CIMATEC  BA  Grande               9.6                   9   \n",
       "3  SENAI - LAURO DE FREITAS  BA  Grande               9.2                   9   \n",
       "4       SENAI - DENDEZEIROS  BA  Grande               9.6                   9   \n",
       "5    SENAI Feira de Santana  BA  Grande               9.6                   9   \n",
       "\n",
       "   Maturidade Controle de Conteúdo  Maturidade final    Classe    Regiao  \n",
       "0                                7               8.6  Classe A  Nordeste  \n",
       "3                                7               8.4  Classe A  Nordeste  \n",
       "4                                7               8.6  Classe A  Nordeste  \n",
       "5                                7               8.6  Classe A  Nordeste  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.Classe == 'Classe A']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scripts que retornam as %'s das classes em suas respectivas zonas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# input: Brasil, Norte, Nordeste, Sul, BA, DF, SP...\n",
    "# return percentage list classA, classB, classC, ... \n",
    "def class_percentage(lugar):\n",
    "    if lugar.capitalize() in ['Norte', 'Sul', 'Nordeste', 'Centro-oeste', 'Sudeste']:\n",
    "        return class_percentage_regiao(lugar)\n",
    "    elif lugar.upper() in ['AC','AP','AM','BA','CE','DF','ES','GO',\n",
    "                           'MA','MT','MS','MG','PA','PB','PR','PE',\n",
    "                           'PI','RJ','RN','RS','RO','RR','SC','SP','SE','TO']:\n",
    "        return class_percentage_estado(lugar)\n",
    "    else:\n",
    "        return class_percentage_general()\n",
    "\n",
    "def class_percentage_general():\n",
    "    percent_class_A = (len(df[df.Classe == 'Classe A']) / len(df))*100\n",
    "    percent_class_B = (len(df[df.Classe == 'Classe B']) / len(df))*100\n",
    "    percent_class_C = (len(df[df.Classe == 'Classe C']) / len(df))*100\n",
    "    percent_class_D = (len(df[df.Classe == 'Classe D']) / len(df))*100\n",
    "    percent_class_E = (len(df[df.Classe == 'Classe E']) / len(df))*100\n",
    "    percent_class_F = (len(df[df.Classe == 'Classe F']) / len(df))*100\n",
    "    percent_class_G = (len(df[df.Classe == 'Classe G']) / len(df))*100\n",
    "    percent_class_H = (len(df[df.Classe == 'Classe H']) / len(df))*100\n",
    "    percent_class_I = (len(df[df.Classe == 'Classe I']) / len(df))*100\n",
    "    \n",
    "    return percent_class_A, percent_class_B, percent_class_C, percent_class_D, percent_class_E,percent_class_F,percent_class_G, percent_class_H, percent_class_I\n",
    "    \n",
    "    \n",
    "def class_percentage_regiao(lugar):\n",
    "    regiao_group = df[df.Regiao == lugar]\n",
    "    percent_class_A = (len(regiao_group[regiao_group.Classe=='Classe A']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_B = (len(regiao_group[regiao_group.Classe=='Classe B']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_C = (len(regiao_group[regiao_group.Classe=='Classe C']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_D = (len(regiao_group[regiao_group.Classe=='Classe D']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_E = (len(regiao_group[regiao_group.Classe=='Classe E']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_F = (len(regiao_group[regiao_group.Classe=='Classe F']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_G = (len(regiao_group[regiao_group.Classe=='Classe G']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_H = (len(regiao_group[regiao_group.Classe=='Classe H']) / (regiao_group['Classe'].count()))*100\n",
    "    percent_class_I = (len(regiao_group[regiao_group.Classe=='Classe I']) / (regiao_group['Classe'].count()))*100\n",
    "    return percent_class_A, percent_class_B, percent_class_C, percent_class_D, percent_class_E,percent_class_F,percent_class_G, percent_class_H, percent_class_I \n",
    "\n",
    "def class_percentage_estado(lugar):\n",
    "    estado_group = df[df.UF == lugar]\n",
    "    percent_class_A = (len(estado_group[estado_group.Classe=='Classe A']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_B = (len(estado_group[estado_group.Classe=='Classe B']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_C = (len(estado_group[estado_group.Classe=='Classe C']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_D = (len(estado_group[estado_group.Classe=='Classe D']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_E = (len(estado_group[estado_group.Classe=='Classe E']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_F = (len(estado_group[estado_group.Classe=='Classe F']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_G = (len(estado_group[estado_group.Classe=='Classe G']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_H = (len(estado_group[estado_group.Classe=='Classe H']) / (estado_group['Classe'].count()))*100\n",
    "    percent_class_I = (len(estado_group[estado_group.Classe=='Classe I']) / (estado_group['Classe'].count()))*100\n",
    "    return percent_class_A, percent_class_B, percent_class_C, percent_class_D, percent_class_E,percent_class_F, percent_class_G, percent_class_H, percent_class_I\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scripts que retornam as %'s dos tamanhos em suas respectivas zonas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Return list with percentage (grande, média, pequena)\n",
    "\n",
    "def size_percentage(lugar):\n",
    "    if lugar.capitalize() in ['Norte', 'Sul', 'Nordeste', 'Centro-oeste', 'Sudeste']:\n",
    "        return size_percentage_regiao(lugar)\n",
    "    elif lugar.upper() in ['AC','AP','AM','BA','CE','DF','ES','GO',\n",
    "                           'MA','MT','MS','MG','PA','PB','PR','PE',\n",
    "                           'PI','RJ','RN','RS','RO','RR','SC','SP','SE','TO']:\n",
    "        return size_percentage_estado(lugar)\n",
    "    else:\n",
    "        return size_percentage_general()\n",
    "\n",
    "\n",
    "def size_percentage_general():\n",
    "    percentage_pequena = (len(df[df.Tamanho == 'Pequena']) / len(df))*100\n",
    "    percentage_media = (len(df[df.Tamanho == 'Média']) / len(df))*100\n",
    "    percentage_grande = (len(df[df.Tamanho == 'Grande']) / len(df))*100\n",
    "    return percentage_grande, percentage_media, percentage_pequena\n",
    "    \n",
    "\n",
    "def size_percentage_regiao(lugar):\n",
    "    regiao_group = df[df.Regiao==lugar]\n",
    "    percentage_pequena = (len(regiao_group[regiao_group.Tamanho == 'Pequena'])/len(regiao_group))*100\n",
    "    percentage_media = (len(regiao_group[regiao_group.Tamanho == 'Média'])/len(regiao_group))*100\n",
    "    percentage_grande = (len(regiao_group[regiao_group.Tamanho == 'Grande'])/len(regiao_group))*100\n",
    "    return percentage_grande, percentage_media, percentage_pequena\n",
    "\n",
    "def size_percentage_estado(lugar):\n",
    "    estado_group = df[df.UF==lugar]\n",
    "    percentage_pequena = (len(estado_group[estado_group.Tamanho == 'Pequena'])/len(estado_group))*100\n",
    "    percentage_media = (len(estado_group[estado_group.Tamanho == 'Média'])/len(estado_group))*100\n",
    "    percentage_grande = (len(estado_group[estado_group.Tamanho == 'Grande'])/len(estado_group))*100\n",
    "    return percentage_grande, percentage_media, percentage_pequena\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scripts que abordam as escolas individualmente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unidade</th>\n",
       "      <th>UF</th>\n",
       "      <th>Tamanho</th>\n",
       "      <th>Maturidade Infra</th>\n",
       "      <th>Maturidade Conexão</th>\n",
       "      <th>Maturidade Controle de Conteúdo</th>\n",
       "      <th>Maturidade final</th>\n",
       "      <th>Classe</th>\n",
       "      <th>Regiao</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SENAI - CIMATEC</td>\n",
       "      <td>BA</td>\n",
       "      <td>Grande</td>\n",
       "      <td>9.6</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>8.6</td>\n",
       "      <td>Classe A</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SENAI - CAMAÇARI</td>\n",
       "      <td>BA</td>\n",
       "      <td>Média</td>\n",
       "      <td>8.6</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7.6</td>\n",
       "      <td>Classe B</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CFP Candeias</td>\n",
       "      <td>BA</td>\n",
       "      <td>Pequena</td>\n",
       "      <td>8.6</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>7.2</td>\n",
       "      <td>Classe C</td>\n",
       "      <td>Nordeste</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Unidade  UF  Tamanho  Maturidade Infra  Maturidade Conexão  \\\n",
       "0   SENAI - CIMATEC  BA   Grande               9.6                   9   \n",
       "1  SENAI - CAMAÇARI  BA    Média               8.6                   7   \n",
       "2      CFP Candeias  BA  Pequena               8.6                   6   \n",
       "\n",
       "   Maturidade Controle de Conteúdo  Maturidade final    Classe    Regiao  \n",
       "0                                7               8.6  Classe A  Nordeste  \n",
       "1                                7               7.6  Classe B  Nordeste  \n",
       "2                                7               7.2  Classe C  Nordeste  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "def change_priority(school_name):\n",
    "    maturities = []\n",
    "    #pandas_index = df.index[df['Unidade'] == 'CFP Candeias'].tolist()\n",
    "    grades = ['Maturidade Infra', 'Maturidade Conexão', 'Maturidade Controle de Conteúdo']\n",
    "    index = df[df['Unidade']==school_name].index.tolist()[0]\n",
    "\n",
    "    for i in grades:\n",
    "        maturities.append(df[i][index])\n",
    "    \n",
    "    index_smaller = maturities.index(min(maturities))     \n",
    "    #return index_smaller\n",
    "    #index smaller points the most fragile aspect of the network (0:infra , 1:connection, 2: content control)\n",
    "    \n",
    "    if index_smaller == 0:\n",
    "        return 'infra'\n",
    "    elif index_smaller ==1:\n",
    "        return 'connection'\n",
    "    elif index_smaller ==2:\n",
    "        return 'content_contol'\n",
    "    else:\n",
    "        print('Something wrong in change_priority() function')\n",
    "\n",
    "\n",
    "def specific_infra(name_school):\n",
    "    questions = [36,38,47,68]\n",
    "    index = df_questions[df_questions['Unidade']==name_school].index.tolist()[0]\n",
    "    evaluation = []\n",
    "    \n",
    "    for i in questions:\n",
    "        evaluation.append(df_questions[i][index])\n",
    "        \n",
    "    if evaluation[0] == 'Não':\n",
    "        print('Switches não possuem portas Gigabit Ethernet')\n",
    "    if evaluation[1] == 'Não':\n",
    "        print('Switches não suportam PoE')\n",
    "    if evaluation[2] == 'Não':\n",
    "        print('Switches não suportam roteamento entre VLANs')\n",
    "    if '802.11ac' not in evaluation[3].split(';'):\n",
    "        print('Protocolos suportados pelos APs podem ser melhorados')\n",
    "\n",
    "def specific_connection(name_school):\n",
    "    questions = [78,79,84]\n",
    "    index = df_questions[df_questions['Unidade']==name_school].index.tolist()[0]\n",
    "    evaluation = []\n",
    "    \n",
    "    for i in questions:\n",
    "        evaluation.append(df_questions[i][index])\n",
    "    \n",
    "    if evaluation[0] != 'MPLS' or 'Dedicado':\n",
    "        print('Link fraco, pode ser substituido por MPLS ou por link dedicado.')\n",
    "    # Determinar com o Larenz o que é uma velocidade boa;\n",
    "    if evaluation[1] < 100:\n",
    "        print('Velocidade da banda contratada abaixo do recomendado.') \n",
    "\n",
    "# In this case, we will use the DataFrame 'df' not df_questions!!!\n",
    "def specific_contentMaturity(name_school):\n",
    "    index = df[df['Unidade']==name_school].index.tolist()[0]\n",
    "    grade_content_maturity = df['Maturidade Controle de Conteúdo'][index]\n",
    "    \n",
    "    if grade_content_maturity == 0:\n",
    "        print('Infraestrutura carece de Firewall e NAC')\n",
    "    if grade_content_maturity == 3:\n",
    "        print('Infraestrutura possui NAC, mas carece de Firewall')\n",
    "    if grade_content_maturity == 4:\n",
    "        print('Infraestrutura possui firewall, mas carece de Proxy ou NAC')\n",
    "    if grade_content_maturity == 7:\n",
    "        print('Infraestrutura possui Next Generation Firewall sem NAC ou Firewall/Proxy com NAC')\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['SENAI Taguatinga', 'SESI/SENAI – SOBRADINHO', 'SENAI GAMA']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.UF == 'DF']['Unidade'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
